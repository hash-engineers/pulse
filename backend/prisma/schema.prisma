generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ERole {
  CEO
  CTO
  CIO
  COO
  CFO
  SRE
  SOFTWARE_ENGINEER
  SENIOR_SOFTWARE_ENGINEER
  LEAD_ENGINEER
  ENGINEERING_MANAGER
  DEVOPS_ENGINEER
  QA_ENGINEER
  SDET
  SYSTEMS_ARCHITECT
  UI_ENGINEER
  BACKEND_ENGINEER
  FRONTEND_ENGINEER
  PRODUCT_MANAGER
  PRODUCT_OWNER
  UX_DESIGNER
  UIUX_DESIGNER
  BUSINESS_ANALYST
  GRAPHIC_DESIGNER
  INTERACTION_DESIGNER
  VISUAL_DESIGNER
  MARKETING_MANAGER
  SALES_MANAGER
  CUSTOMER_SUCCESS_MANAGER
  ACCOUNT_EXECUTIVE
  IT_SUPPORT
  SYSTEM_ADMINISTRATOR
  NETWORK_ADMINISTRATOR
  OPERATIONS_MANAGER
  HR_MANAGER
  RECRUITER
  FINANCIAL_ANALYST
  ACCOUNTANT
  EXECUTIVE_ASSISTANT
  OFFICE_MANAGER
  LEGAL_COUNSEL
  COMPLIANCE_OFFICER
}

enum ECompanySize {
  JUST__ME
  ONE__TO__FIVE
  SIX__TO__TEN
  ELEVEN__TO__TWENTY
  TWENTY_ONE__TO__FIFTY
  FIFTY_ONE__TO__HUNDRED
  ONE_HUNDRED_ONE__TO__FIVE_HUNDRED
  FIVE_HUNDRED_ONE__TO__ONE_THOUSAND
  ONE_THOUSAND_ONE__TO__TWO_THOUSAND
  TWO_THOUSAN_PLUS
}

enum EWhenToAlert {
  URL_BECOMES_UNAVAILABLE
  URL_DOES_NOT_CONTAIN_KEYWORD
  URL_CONTAINS_A_KEYWORD
  URL_RETURNS_HTTP_STATUS_OTHER_THAN
  HOST_DOES_NOT_RESPOND_TO_PING
}

enum ENextAction {
  DO_NOTHING
  IMMEDIATELY_ALERT_ALL_OTHER_TEAM_MEMBER
  WITHIN_3_MINUTES_ALERT_ALL_OTHER_TEAM_MEMBERS
  WITHIN_5_MINUTES_ALERT_ALL_OTHER_TEAM_MEMBERS
  WITHIN_10_MINUTES_ALERT_ALL_OTHER_TEAM_MEMBERS
}

enum EMonitorStatus {
  UP
  DOWN
  PAUSED
  PENDING
}

enum EIncidentStatus {
  ONGOING
  ACKNOWLEDGED
  RESOLVED
}

enum ESubscriptionPlan {
  FREE
  PREMIUM
}

enum ESubscriptionPeriod {
  MONTHLY
  YEARLY
}

model User {
  id String @id

  name  String
  email String @unique
  role  ERole? @default(SRE)

  subscription Subscription?

  companyName String
  company     Company @relation(fields: [companyName], references: [name], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Company {
  id String @id @default(cuid())

  name       String       @unique
  size       ECompanySize @default(JUST__ME)
  customerId String?      @unique

  subscription Subscription?

  members  User[]
  monitors Monitor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("companies")
}

model Monitor {
  id String @id @default(cuid())

  url              String         @unique
  name             String?
  statusCode       Int            @default(200)
  status           EMonitorStatus @default(PENDING)
  downtime         Float          @default(0.00)
  call             Boolean        @default(false)
  sendSMS          Boolean        @default(false)
  sendEmail        Boolean        @default(true)
  pushNotification Boolean        @default(false)
  whenToAlert      EWhenToAlert   @default(URL_BECOMES_UNAVAILABLE)
  nextAction       ENextAction    @default(WITHIN_3_MINUTES_ALERT_ALL_OTHER_TEAM_MEMBERS)

  incidents Incident[]

  companyName String
  company     Company @relation(fields: [companyName], references: [name], onDelete: Cascade)

  checkedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("monitors")
}

model Incident {
  id String @id @default(cuid())

  code          String
  statusCode    Int?
  statusMessage String?
  status        EIncidentStatus @default(ONGOING)

  monitorId String
  monitor   Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("incidents")
}

model Subscription {
  id String @id @default(cuid())

  plan   ESubscriptionPlan
  period ESubscriptionPeriod

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])

  startDate DateTime @default(now())
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}
